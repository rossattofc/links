import os
import tkinter as tk
from tkinter import filedialog
import xlwings as xw
from pptx import Presentation
from pptx.util import Inches

def criar_apresentacao_de_graficos():
    """
    Abre uma janela para selecionar uma pasta, encontra todos os arquivos Excel,
    e cria uma apresentação de PowerPoint com os gráficos de cada planilha.
    """
    # 1. Abrir janela para selecionar a pasta
    root = tk.Tk()
    root.withdraw()  # Esconde a janela principal do tkinter
    
    folder_path = filedialog.askdirectory(title="Selecione a pasta com as planilhas do Excel")
    
    if not folder_path:
        print("Nenhuma pasta selecionada. Operação cancelada.")
        return

    print(f"Pasta selecionada: {folder_path}")

    # 2. Inicializar a apresentação e a aplicação Excel
    prs = Presentation()
    # Define o layout de slide em branco (geralmente o índice 6)
    blank_slide_layout = prs.slide_layouts[6] 

    # Inicia o Excel em modo invisível para não atrapalhar o usuário
    with xw.App(visible=False) as excel_app:
        
        # 3. Loop através de todos os arquivos na pasta
        for filename in os.listdir(folder_path):
            # Verifica se é um arquivo Excel
            if filename.lower().endswith(('.xlsx', '.xlsm', '.xls')):
                excel_file_path = os.path.join(folder_path, filename)
                print(f"\nProcessando arquivo: {filename}...")
                
                try:
                    # Abre a pasta de trabalho do Excel em modo somente leitura
                    wb = excel_app.books.open(excel_file_path)

                    # 4. Loop através de cada planilha (aba) no arquivo
                    for sheet in wb.sheets:
                        # Verifica se a planilha tem gráficos
                        if sheet.charts.count > 0:
                            print(f"  - Encontrados {sheet.charts.count} gráficos na aba '{sheet.name}'. Criando slide...")
                            
                            # Adiciona um novo slide para esta planilha
                            slide = prs.slides.add_slide(blank_slide_layout)

                            # Adiciona um título ao slide
                            title = slide.shapes.add_textbox(Inches(0.5), Inches(0.2), Inches(9), Inches(0.5))
                            title.text_frame.text = f"{wb.name} - {sheet.name}"
                            
                            # Posições iniciais para as imagens no slide
                            left = Inches(0.5)
                            top = Inches(1.0)
                            
                            # 5. Loop através de cada gráfico na planilha
                            for i, chart in enumerate(sheet.charts):
                                # Define um nome de arquivo temporário para a imagem do gráfico
                                temp_image_path = os.path.join(folder_path, f"temp_chart_{i}.png")
                                
                                # Exporta o gráfico como uma imagem PNG
                                chart.to_png(path=temp_image_path)
                                
                                # Adiciona a imagem ao slide
                                slide.shapes.add_picture(temp_image_path, left, top, width=Inches(5))
                                
                                # Remove o arquivo de imagem temporário
                                os.remove(temp_image_path)
                                
                                # Atualiza a posição para o próximo gráfico (abaixo do anterior)
                                top += Inches(3.0) 
                                
                                # Se o próximo gráfico sair do slide, cria uma nova coluna (opcional)
                                if top >= Inches(7.0):
                                    top = Inches(1.0)
                                    left += Inches(5.2)

                    # Fecha a pasta de trabalho
                    wb.close()
                
                except Exception as e:
                    print(f"    ERRO ao processar o arquivo {filename}. Erro: {e}")
                    # Garante que o workbook seja fechado em caso de erro
                    if 'wb' in locals() and wb.app.pid:
                        wb.close()
    
    # 6. Salvar a apresentação final
    output_pptx_path = os.path.join(folder_path, "Apresentacao_Gerada.pptx")
    prs.save(output_pptx_path)
    
    print(f"\nConcluído! Apresentação salva em: {output_pptx_path}")

# Executa a função principal
if __name__ == "__main__":
    criar_apresentacao_de_graficos()
